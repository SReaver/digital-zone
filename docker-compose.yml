services:
  digital-zone:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=digital-zone
    command: npm run start:dev -- digital-zone # This instructs Docker Compose to run the "start:dev" script when starting the container
    ports:
      - 3000:3000
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      # Note: This is usually not a good practice to mount the "node_modules" directory on the host to the container       # We are doing this for the sake of simplicity in this example       - ./node_modules:/usr/src/app/node_modules
      # This instructs Docker Compose to mount the "digital-zone" directory on the host to the "/usr/src/app" directory on the container
      # This allows us to make changes to the code on the host and have them reflected in the container without having to rebuild the image
      - ./apps/digital-zone:/usr/src/app/apps/digital-zone

  provider-one:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=provider-one
    command: [ "sh", "-c", "npx prisma generate --schema=./apps/provider-one/prisma/schema.prisma && npm run start:dev -- provider-one" ]
    ports:
      - 3001:3001
    environment:
      - POSTGRES_HOST=provider-one-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
      - DATABASE_URL=postgresql://postgres:postgres@provider-one-db:5432/products
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/provider-one:/usr/src/app/apps/provider-one
    depends_on:
      - provider-one-db
  provider-one-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
    volumes:
      - ./pg_data/db-one:/var/lib/postgresql/data
      - ./initial-data:/docker-entrypoint-initdb.d
    ports:
      - 5431:5432

  provider-two:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        - APP_NAME=provider-two
    command: [ "sh", "-c", "npx prisma generate --schema=./apps/provider-two/prisma/schema.prisma && npm run start:dev -- provider-two" ]
    ports:
      - 3002:3002
    environment:
      - POSTGRES_HOST=provider-two-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
      - DATABASE_URL=postgresql://postgres:postgres@provider-two-db:5432/products
    volumes:
      - ./libs:/usr/src/app/libs
      - ./package.json:/usr/src/app/package.json
      - ./tsconfig.json:/usr/src/app/tsconfig.json
      - ./apps/provider-two:/usr/src/app/apps/provider-two
    depends_on:
      - provider-two-db
  provider-two-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
    volumes:
      - ./pg_data/db-two:/var/lib/postgresql/data
      - ./initial-data:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
volumes:
  pg_data:
